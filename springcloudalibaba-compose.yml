version: '3.8'  # 指定使用的 Docker Compose 文件版本
#free -m要查看 buff/cache 的占用情况;sync && echo 1 > /proc/sys/vm/drop_caches清理页面缓存,这将强制系统将所有脏页（未写入磁盘的已修改页面）写入磁盘并清空页面缓存。
services: # 定义服务部分，包含所有要启动的服务
  elasticsearch: # 定义名为 elasticsearch 的服务
    image: elasticsearch:8.16.0  # 使用的 Docker 镜像及标签
    container_name: elasticsearch  # 设置容器名称为 elasticsearch
#    restart: unless-stopped
    environment: # 环境变量设置
      - discovery.type=single-node  # 单节点集群模式，适合开发和测试环境
      - ELASTIC_USERNAME=elastic  # Elasticsearch 用户名elastic
      - ELASTIC_PASSWORD=qihuis  # Elasticsearch 密码（请在生产环境中更改）changeme
      - xpack.security.enabled=true  # 启用安全特性，默认需要用户名和密码访问
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # 设置 JVM 堆内存大小
    volumes: # 数据卷挂载
      - /opt/qihuis/es/data:/usr/share/elasticsearch/data  # 将数据持久化到 Docker 主机上的卷中
      - /opt/qihuis/es/plugins:/usr/share/elasticsearch/plugins  # 将数据持久化到 Docker 主机上的卷中
      - /opt/qihuis/es/logs:/usr/share/elasticsearch/logs  # 将数据持久化到 Docker 主机上的卷中
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports: # 端口映射，将主机端口映射到容器端口
      - "9200:9200"  # 映射 HTTP REST API 端口
      - "9300:9300"  # 映射节点间通信端口
    networks: # 容器连接的网络
      - qihuis  # 自定义网络名称，用于服务间的通信

  kibana: # 定义名为 kibana 的服务
    image: kibana:8.16.0  # 使用的 Docker 镜像及标签
    container_name: kibana  # 设置容器名称为 kibana
#    restart: unless-stopped
    environment: # 环境变量设置
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # Kibana 连接的 Elasticsearch 地址
      - ELASTICSEARCH_USERNAME=kibana_system  # Elasticsearch 用户名elastic
      - ELASTICSEARCH_PASSWORD=2BtHmoVynKYAiwx5qV9o  # Elasticsearch 密码changeme 执行 docker exec -it elasticsearch bin/elasticsearch-reset-password -u kibana_system  会重置密码
    ports: # 端口映射
      - "5601:5601"  # 映射 Kibana 的 Web 界面端口
    depends_on: # 依赖的服务列表
      - elasticsearch  # 表示 Kibana 依赖于 elasticsearch 服务
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: # 容器连接的网络
      - qihuis  # 自定义网络名称，用于服务间的通信

  nacos:
    image: nacos/nacos-server:v2.4.3
    container_name: nacos
    restart: unless-stopped
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9527:9527" # 如果你想要暴露管理控制台的端口
    environment:
      - MODE=standalone # 单机模式
    volumes:
      - /opt/qihuis/nacos/logs:/home/nacos/logs # 持久化日志
      - /opt/qihuis/nacos/data:/home/nacos/embedded-derby-data # 持久化嵌入式Derby数据库的数据
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - qihuis

  kafka:
    image: 'bitnami/kafka:3.6.2'
    container_name: kafka
#    restart: always
    hostname: kafka
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,EXTERNAL://kafka:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.128:9092,EXTERNAL://192.168.10.128:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - "KAFKA_HEAP_OPTS=-Xmx512m -Xms512m"
    volumes:
      - /opt/qihuis/kafka/config:/bitnami/kafka/config
      - /opt/qihuis/kafka/data:/bitnami/kafka/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - qihuis
networks:
  qihuis:
    driver: bridge
  